---
title: "carbon GzLMs"
format: html
editor: visual
---

```{r}
pacman::p_load(
  dplyr,
  tidyverse,
  readxl,
  ggplot2,
  vegan,
  terra,
  corrplot,
  PerformanceAnalytics,
  usdm,
  janitor,
  openxlsx,
  lme4,
  DHARMa)
```

## data

### c per m2

```{r}
c_per_m2 <- read.xlsx("../final carbon data/c_m2_site.xlsx") %>% 
  rename(unique_id = "id")
c_per_m2_sub <- read.xlsx("../final carbon data/c_m2_subplot.xlsx")
```

### environmental variables at each site

```{r}
env_site_final <- read.xlsx("../final carbon data/env_site_final.xlsx")

dplyr::setdiff(c_per_m2$unique_id, env_site_final$unique_id)

c_env_sites <- full_join(c_per_m2, env_site_final) %>%
  select(!c(FAC, LGS))  # remove FAC because super correlated and categorical, remove LGS for now because missing values
  
c_env_sites$dominant <- as.character(c_env_sites$dominant)
  
#subset by park
c_env_sites_GM <- c_env_sites %>% 
  filter(park == "GM")

c_env_sites_TN <- c_env_sites %>% 
  filter(park == "TN")

```

problem: for GM I only sampled forests that had balsam fir and white birch as the classified dominant species but the park also has black spruce, white spruce, tA and tL as classifications

solution: switch to hardwood, softwood, and mixed

### environmental variables at each subplot

```{r}
env_subplots_final <- read.xlsx("../final carbon data/env_subplots_final.xlsx")

dplyr::setdiff(c_per_m2_sub$unique_id, env_subplots_final$unique_id)

c_env_subplots <- full_join(c_per_m2_sub, env_subplots_final) %>%
  select(!c(FAC, LGS))  # remove FAC because super correlated and categorical, remove LGS for now because missing values
  
#subset by park
c_env_subplots_GM <- c_env_subplots %>% 
  filter(park_id == "GM")

c_env_subplots_TN <- c_env_subplots %>% 
  filter(park_id == "TN")

```

## subsetting

## scale continuous predictor variables?

```{r}
c_env_sites_scale <- c_env_sites

c_env_sites_scale[c(11:18)] <- scale(c_env_sites_scale[c(11:18)])

c_env_sites_scale_GM <- c_env_sites_scale %>% 
  filter(park == "GM")

c_env_sites_scale_TN <- c_env_sites_scale %>% 
  filter(park == "TN")
```

#### for subplots

```{r}
c_env_sub_scale <- c_env_subplots

c_env_sub_scale[c(21,23:29)] <- scale(c_env_sub_scale[c(21,23:29)])

c_env_sub_scale_GM <- c_env_sub_scale %>% 
  filter(park_id == "GM")

c_env_sub_scale_TN <- c_env_sub_scale %>% 
  filter(park_id == "TN")
```

## models using sites

always ends up with a singularity because only able to divide into two random groups (year)

### full models

#### GM

```{r}
 m1 <- glm(c_m2_site ~ FHT + ELE + SLO + ASP, data = c_env_sites_scale_GM, family = Gamma(link = "log"))
summary(m1)
plot(m1)

sim_res_m1 <- simulateResiduals(fittedModel = m1)
plot(sim_res_m1)

tt <- getME(m1,"theta")
ll <- getME(m1,"lower")
min(tt[ll==0]) # very small

m2 <- glmer(c_m2_site ~ CC + ELE + SLO + ASP + (1|site_id_ex), data = c_env_sites_scale_GM, family = Gamma(link = "log"))
summary(m2)
plot(m2)

c_env_sites %>% group_by(park_id, year) %>% 
  summarise(count = n())
```

### reduced model

```{r}
# m1r <- glmer(c_m2_site ~ FHT + (1|site_id_ex), data = c_env_sites_scale_GM, family = Gamma(link = "log"))
# summary(m1)
# plot(m1)
# 
# m2r <- glmer(c_m2_site ~ CC + (1|site_id_ex), data = c_env_sites_scale_GM, family = Gamma(link = "log"))
# summary(m2)
# plot(m2)
```

## with subplots

random effects of sites, and years

### null model

need to work on null model if not doing random effect of site (by subplot)

#### GM

```{r}
histogram(c_env_sub_scale_GM$c_m2_subplot, nint = 100)
m1n <- glmer(c_m2_subplot ~ (1|site_id), data = c_env_sub_scale_GM, family = Gamma(link = "log"))
summary(m1n)
plot(m1n)


#allFit(m1n) #check different optimizers
m1n <- update(m1n, control=glmerControl(optimizer="nlminbwrap")) #the built in bobyqa works but not for others so use nlminbwrap

# check residuals of  gamma distribution
sim_res_m1n <- simulateResiduals(fittedModel = m1n)
plot(sim_res_m1n) #pretty bad

#check with just log transformed data
m1n <- lmer(log(c_m2_subplot) ~ (1|site_id), data = c_env_sub_scale_GM)
summary(m1n)
plot(m1n)

hist(resid(m1n), main="", xlab="Residuals") 
qqnorm(resid(m1n))
qqline(resid(m1n))
acf(resid(m1n))

# what about normal distribution with log link - is that the sam eas above? defenitely not the same 
m1nl <- glmer(log(c_m2_subplot) ~ (1|site_id), data = c_env_sub_scale_GM, family = gaussian(link = "log"))
summary(m1nl)
plot(m1nl)

hist(resid(m1n), main="", xlab="Residuals") 
qqnorm(resid(m1n))
qqline(resid(m1n))
acf(resid(m1n))


#check with normal
m1norm <- lmer(c_m2_subplot ~ (1|site_id), data = c_env_sub_scale_GM)
summary(m1norm)
plot(m1norm)

hist(resid(m1norm), main="", xlab="Residuals") 
qqnorm(resid(m1norm))
qqline(resid(m1norm))
acf(resid(m1norm))


Study <- c_env_sub_scale_GM
Study$Model.F.Res<- residuals(m1n) #extracts the residuals and places them in a new column in our original data table
Study$Abs.Model.F.Res <-abs(Study$Model.F.Res) #creates a new column with the absolute value of the residuals
Study$Model.F.Res2 <- Study$Abs.Model.F.Res^2 #squares the absolute values of the residuals to provide the more robust estimate
Levene.Model.F <- lm(Model.F.Res2 ~ site_id, data=Study) #ANOVA of the squared residuals
anova(Levene.Model.F) #displays the results


```

#### TN

```{r}
n1n <- glmer(c_m2_subplot ~ (1|site_id), data = c_env_sub_scale_TN, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap"))
summary(n1n) # control=glmerControl(optimizer="nlminbwrap")
plot(n1n)

```

### full model

#### GM

```{r}
m1 <- glmer(c_m2_subplot ~ FHT + EVIamp + EVImed + ELE + SLO + ASP + (1|site_id), data = c_env_sub_scale_GM, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap")) #year is specified by site_id
summary(m1)
plot(m1)

png(filename = "/Users/emmersonEmmerson/Documents/Master's/C_forecasting_NL/code_for_stats/residual plots for gzlm/gamma_log.png", height = 900, width = 900, units= "px")
plot(m1)
dev.off()


m2 <- glmer(c_m2_subplot ~ CC + EVIamp + EVImed + ELE + SLO + ASP + CEC_LCT + (1|site_id), data = c_env_sub_scale_GM, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap"))
summary(m2)
plot(m2)
```

#### TN

```{r}
n1 <- glmer(c_m2_subplot ~ FHT + EVIamp + EVImed + ELE + SLO + ASP + (1|site_id), data = c_env_sub_scale_TN, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap")) #year is specified by site_id
summary(n1)
plot(n1)

n2 <- glmer(c_m2_subplot ~ CC + EVIamp + EVImed + ELE + SLO + ASP + (1|site_id), data = c_env_sub_scale_TN, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap")) # gave warnig of false convergence
summary(n1)
plot(n1)
```

### reduced model

#### GM

```{r}
m1r <- glmer(c_m2_subplot ~ FHT + EVImed + (1|site_id), data = c_env_sub_scale_GM, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap"))
summary(m1r)
plot(m1r)

m2r <- glmer(c_m2_subplot ~ CC + EVImed + (1|site_id), data = c_env_sub_scale_GM, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap"))
summary(m2r)
plot(m2r)
```

#### TN

```{r}
n1r <- glmer(c_m2_subplot ~ FHT + (1|site_id), data = c_env_sub_scale_TN, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap"))
summary(n1r) 
plot(n1r)

n2r <- glmer(c_m2_subplot ~ CC + (1|site_id), data = c_env_sub_scale_TN, family = Gamma(link = "log"), control=glmerControl(optimizer="nlminbwrap"))
summary(n2r)
plot(n2r)
```

residual plots for gzlm

```{r}
c_env_sites

m1 <- lmer(log(c_m2_subplot) ~ FHT + EVIamp + EVImed + ELE + SLO + ASP + (1|site_id), data = c_env_subplots) #year is specified by site_id

allFit(m1)

summary(m1)
plot(m1)

png(filename = "/Users/emmersonEmmerson/Documents/Master's/C_forecasting_NL/code_for_stats/residual plots for gzlm/normal_not_transformed.png", height = 900, width = 900, units= "px")
plot(m1)
dev.off()
```
